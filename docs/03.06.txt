Текст программы - на ассемблере или си
затем он транслируется
Получаются машинные коды
FASM поддерживает архитектуры Intel, ARM и многие другие

у каждого индивидуальное задание

физическое управление железом лучше писать на ассемблере, т.к. на языках высокого уровня не предусмотрены возможности побитового управления

макроязык - надстройка над ассемблером, позволяет упростить написание программ
    некоторые макроязыки не привязаны к конкретному языку
    преобразует текст программы в текст
    при обработке текста программы вызов макроса заменяется его телом с заменой имён параметров
    формат макроса:
    macro имя_макроса параметры (тут они формальные, при обращении к макросу заменяются на фактические)
        {
            тело_макроса
        }

Размеры операторов:
    Operator    Bits    Bytes
    byte        8       1
    word        16      2
    dword       32      4
    fword       48      6
    pword       48      6
    qword       64      8
    tbyte       80      10
    tword       80      10
    dqword      128     16
    xword       128     16
    qqword      256     32
    yword       256     32
    dqqword     512     64
    zword       512     64

format - формат загрузки
entry - точка входа в файл

мнемоника - имя команды процессора, контекстно-отражающая смысл команды

регистр esi используется для операций с массивами
eip - регистр instruction pointer, указывает на текущую команду
ecx - регистр-счётчик цикла
на строку после вызова системных функций (длинные адреса) ставим брейкпоинт и перескакиваем их, чтобы долго не бродить по ним
первые 4 регистра почти идентичны (eax, ebx, ecx, edx или r в начале), при обычных операциях их можно использовать взаимозаменяемо, но неравнозначны при использовании деления, умножения и т.д.

упрятывать лучше максимально доступный регистр (для 32 бит eax, для 64 бит rax)

запись буфера константой для байта, слова и двойного слова путем задание константы